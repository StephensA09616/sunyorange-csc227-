{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MtnDo\\\\Downloads\\\\currency-converter\\\\currency-converter - student\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\n\n/*\nCreate the SourceCurrency component.\nThis component should render a dropdown to select the source currency (USD, EUR, JPY) and an input field to enter the amount.\nThe component should accept the following props:\n- currency: the currently selected source currency\n- amount: the currently entered amount\n- onCurrencyChange: an event handler to be called on changes in the source currency dropdown\n- onAmountChange: an event handler to be called on changes in the amount input field\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SourceCurrency({\n  currency,\n  amount,\n  onCurrencyChange,\n  onAmountChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"sourceCurrency\",\n      children: \"Source Currency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"sourceCurrency\",\n      todo: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"USD\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EUR\",\n        children: \"EUR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"JPY\",\n        children: \"JPY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"sourceAmount\",\n      children: \"Amount\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"sourceAmount\",\n      type: \"number\",\n      todo: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n/*\nCreate the TargetCurrency component.\nThis component should render a dropdown to select the target currency (USD, EUR, JPY).\nThe component should accept the following props:\n- currency: the currently selected target currency\n- onCurrencyChange: an event handler to be called on changes in the target currency dropdown\n*/\n_c = SourceCurrency;\nfunction TargetCurrency({\n  currency,\n  onCurrencyChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"targetCurrency\",\n      children: \"Target Currency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"targetCurrency\",\n      todo: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"USD\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EUR\",\n        children: \"EUR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"JPY\",\n        children: \"JPY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n/*\nCreate the ConversionResult component.\nThis component should render the converted amount and the target currency.\nThe component should accept the following props:\n- amount: the converted amount\n- currency: the target currency\n*/\n_c2 = TargetCurrency;\nfunction ConversionResult({\n  amount,\n  currency\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Converted Amount todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n/*\nWrite the MyApp component that will render the SourceCurrency, TargetCurrency, and ConversionResult components.\nThis component should have the following state:\n- sourceCurrency: the currency selected in the source currency dropdown\n- targetCurrency: the currency selected in the target currency dropdown\n- amount: the amount entered in the amount input field\n- convertedAmount: the amount converted to the target currency\n\nThis component should have event handlers to handle changes in the source currency, target currency, and amount.\nThese event handlers should be passed as props to the SourceCurrency and TargetCurrency components.\nWhen the source currency, target currency, or amount changes, the converted amount should be updated.\n\nTo compute the conversion, you can use the free currency API at https://www.freecurrencyapi.com/.\nYou can use the following API key: fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld\nThe API endpoint to get the latest exchange rates is: https://api.freecurrencyapi.com/v1/latest\nThe API endpoint requires the following query parameters:\n- apikey: the API key\n- currencies: the target currency\n- base_currency: the source currency\nThe API will return the exchange rates for the target currency relative to the source currency.\nHere's an example request: https://api.freecurrencyapi.com/v1/latest?apikey=fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld&currencies=EUR&base_currency=USD\nThe response will be in the following format:\n{\n    \"status\": 200,\n    \"data\": {\n        \"EUR\": 0.85\n    }\n}\n\n*/\n_c3 = ConversionResult;\nfunction App() {\n  _s();\n  const freeCurrencyApiKey = 'fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld';\n\n  /*\n  Initialize the state variables sourceCurrency, targetCurrency, amount, and convertedAmount using the React.useState hook.\n  */\n  const [sourceCurrency, setSourceCurrency] = React.useState('USD');\n  const [targetCurrency, setTargetCurrency] = React.useState('JPY');\n  const [amount, setAmount] = React.useState(0);\n  const [convertedAmount, setConvertedAmount] = React.useState(0);\n\n  /*\n  Write a function fetchConversionRate that takes an API key, source currency, and target currency as arguments.\n  This function should make a request to the free currency API to get the conversion rate from the source currency to the target currency.\n  The function should return the conversion rate.\n  */\n  const fetchConversionRate = async (apiKey, source, target) => {\n    // todo\n    return 0;\n  };\n\n  /*\n  Write a function computeConversion that takes the source currency, target currency, and amount as arguments.\n  This function should call fetchConversionRate to get the conversion rate from the source currency to the target currency.\n  It should then compute the converted amount by multiplying the amount by the conversion rate.\n  Finally, it should update the convertedAmount state with the computed value.\n  */\n  const computeConversion = async (source, target, amount) => {\n    // todo\n  };\n\n  /*\n  Write an event handler handleSourceCurrencyChange that takes a currency as an argument.\n  This event handler should update the sourceCurrency state with the new currency.\n  It should then call computeConversion with the new source currency, target currency, and amount.\n  */\n  const handleSourceCurrencyChange = currency => {\n    // todo\n  };\n\n  /*\n  Write an event handler handleTargetCurrencyChange that takes a currency as an argument.\n  This event handler should update the targetCurrency state with the new currency.\n  It should then call computeConversion with the source currency, new target currency, and amount.\n  */\n  const handleTargetCurrencyChange = currency => {\n    // todo\n  };\n\n  /*\n  Write an event handler handleAmountChange that takes an amount as an argument.\n  This event handler should update the amount state with the new amount.\n  It should then call computeConversion with the source currency, target currency, and new amount.\n  */\n  const handleAmountChange = amount => {\n    // todo\n  };\n\n  /*\n  Render the SourceCurrency, TargetCurrency, and ConversionResult components.\n  Pass this component's state as props to each component.\n  Also pass the event handlers to the SourceCurrency and TargetCurrency components.\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Currency Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SourceCurrency, {\n      currency: sourceCurrency,\n      amount: amount,\n      onCurrencyChange: handleSourceCurrencyChange,\n      onAmountChange: handleAmountChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TargetCurrency, {\n      currency: targetCurrency,\n      onCurrencyChange: handleTargetCurrencyChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConversionResult, {\n      amount: convertedAmount,\n      currency: targetCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jsS7baJfpHUj8FY/9De2TGIAXvg=\");\n_c4 = App;\nexport { App, SourceCurrency, TargetCurrency, ConversionResult };\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SourceCurrency\");\n$RefreshReg$(_c2, \"TargetCurrency\");\n$RefreshReg$(_c3, \"ConversionResult\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SourceCurrency","currency","amount","onCurrencyChange","onAmountChange","children","for","fileName","_jsxFileName","lineNumber","columnNumber","id","todo","value","type","_c","TargetCurrency","_c2","ConversionResult","_c3","App","_s","freeCurrencyApiKey","sourceCurrency","setSourceCurrency","useState","targetCurrency","setTargetCurrency","setAmount","convertedAmount","setConvertedAmount","fetchConversionRate","apiKey","source","target","computeConversion","handleSourceCurrencyChange","handleTargetCurrencyChange","handleAmountChange","_c4","$RefreshReg$"],"sources":["C:/Users/MtnDo/Downloads/currency-converter/currency-converter - student/src/App.js"],"sourcesContent":["import React from \"react\";\n\n/*\nCreate the SourceCurrency component.\nThis component should render a dropdown to select the source currency (USD, EUR, JPY) and an input field to enter the amount.\nThe component should accept the following props:\n- currency: the currently selected source currency\n- amount: the currently entered amount\n- onCurrencyChange: an event handler to be called on changes in the source currency dropdown\n- onAmountChange: an event handler to be called on changes in the amount input field\n*/\nfunction SourceCurrency({ currency, amount, onCurrencyChange, onAmountChange }) {\n    return (\n        <div>\n            <label for=\"sourceCurrency\">Source Currency</label>\n            <select id=\"sourceCurrency\" todo=\"1\">\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"JPY\">JPY</option>\n            </select>\n            <label for=\"sourceAmount\">Amount</label>\n            <input id=\"sourceAmount\" type=\"number\" todo=\"1\" ></input>\n        </div>\n    );\n}\n\n/*\nCreate the TargetCurrency component.\nThis component should render a dropdown to select the target currency (USD, EUR, JPY).\nThe component should accept the following props:\n- currency: the currently selected target currency\n- onCurrencyChange: an event handler to be called on changes in the target currency dropdown\n*/\nfunction TargetCurrency({ currency, onCurrencyChange }) {\n    return (\n        <div>\n            <label for=\"targetCurrency\">Target Currency</label>\n            <select id=\"targetCurrency\" todo=\"1\">\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"JPY\">JPY</option>\n            </select>\n        </div>\n    );\n}\n\n/*\nCreate the ConversionResult component.\nThis component should render the converted amount and the target currency.\nThe component should accept the following props:\n- amount: the converted amount\n- currency: the target currency\n*/\nfunction ConversionResult({ amount, currency }) {\n    return (\n        <div>\n            <p>Converted Amount todo</p>\n        </div>\n    );\n}\n\n/*\nWrite the MyApp component that will render the SourceCurrency, TargetCurrency, and ConversionResult components.\nThis component should have the following state:\n- sourceCurrency: the currency selected in the source currency dropdown\n- targetCurrency: the currency selected in the target currency dropdown\n- amount: the amount entered in the amount input field\n- convertedAmount: the amount converted to the target currency\n\nThis component should have event handlers to handle changes in the source currency, target currency, and amount.\nThese event handlers should be passed as props to the SourceCurrency and TargetCurrency components.\nWhen the source currency, target currency, or amount changes, the converted amount should be updated.\n\nTo compute the conversion, you can use the free currency API at https://www.freecurrencyapi.com/.\nYou can use the following API key: fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld\nThe API endpoint to get the latest exchange rates is: https://api.freecurrencyapi.com/v1/latest\nThe API endpoint requires the following query parameters:\n- apikey: the API key\n- currencies: the target currency\n- base_currency: the source currency\nThe API will return the exchange rates for the target currency relative to the source currency.\nHere's an example request: https://api.freecurrencyapi.com/v1/latest?apikey=fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld&currencies=EUR&base_currency=USD\nThe response will be in the following format:\n{\n    \"status\": 200,\n    \"data\": {\n        \"EUR\": 0.85\n    }\n}\n\n*/\nfunction App() {\n    const freeCurrencyApiKey = 'fca_live_e8k2PVN6I4tfPmtQvLLtNhLZwJVOljHTfYJvMhld';\n\n    /*\n    Initialize the state variables sourceCurrency, targetCurrency, amount, and convertedAmount using the React.useState hook.\n    */\n    const [sourceCurrency, setSourceCurrency] = React.useState('USD');\n    const [targetCurrency, setTargetCurrency] = React.useState('JPY');\n    const [amount, setAmount] = React.useState(0);\n    const [convertedAmount, setConvertedAmount] = React.useState(0);\n\n    /*\n    Write a function fetchConversionRate that takes an API key, source currency, and target currency as arguments.\n    This function should make a request to the free currency API to get the conversion rate from the source currency to the target currency.\n    The function should return the conversion rate.\n    */\n    const fetchConversionRate = async (apiKey, source, target) => {\n        // todo\n        return 0;\n    };\n\n    /*\n    Write a function computeConversion that takes the source currency, target currency, and amount as arguments.\n    This function should call fetchConversionRate to get the conversion rate from the source currency to the target currency.\n    It should then compute the converted amount by multiplying the amount by the conversion rate.\n    Finally, it should update the convertedAmount state with the computed value.\n    */\n    const computeConversion = async (source, target, amount) => {\n        // todo\n    };\n\n    /*\n    Write an event handler handleSourceCurrencyChange that takes a currency as an argument.\n    This event handler should update the sourceCurrency state with the new currency.\n    It should then call computeConversion with the new source currency, target currency, and amount.\n    */\n    const handleSourceCurrencyChange = (currency) => {\n        // todo\n    };\n\n    /*\n    Write an event handler handleTargetCurrencyChange that takes a currency as an argument.\n    This event handler should update the targetCurrency state with the new currency.\n    It should then call computeConversion with the source currency, new target currency, and amount.\n    */\n    const handleTargetCurrencyChange = (currency) => {\n        // todo\n    };\n\n    /*\n    Write an event handler handleAmountChange that takes an amount as an argument.\n    This event handler should update the amount state with the new amount.\n    It should then call computeConversion with the source currency, target currency, and new amount.\n    */\n    const handleAmountChange = (amount) => {\n        // todo\n    };\n\n    /*\n    Render the SourceCurrency, TargetCurrency, and ConversionResult components.\n    Pass this component's state as props to each component.\n    Also pass the event handlers to the SourceCurrency and TargetCurrency components.\n    */\n    return (\n        <div>\n            <h1>Currency Converter</h1>\n            <SourceCurrency\n                currency={sourceCurrency}\n                amount={amount}\n                onCurrencyChange={handleSourceCurrencyChange}\n                onAmountChange={handleAmountChange}\n            />\n            <TargetCurrency\n                currency={targetCurrency}\n                onCurrencyChange={handleTargetCurrencyChange}\n            />\n            <ConversionResult\n                amount={convertedAmount}\n                currency={targetCurrency}\n            />\n        </div>\n    );\n}\n\nexport { App, SourceCurrency, TargetCurrency, ConversionResult };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}